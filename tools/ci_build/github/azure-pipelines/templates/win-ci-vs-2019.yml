parameters:
- name: BuildConfig
  type: string

- name: EnvSetupScript
  type: string

- name: job_name_suffix
  type: string

- name: buildArch
  type: string

- name: additionalBuildFlags
  type: string

- name: msbuildPlatform
  type: string

- name: isX86
  type: boolean
  default: false

- name: isTraining
  type: boolean
  default: false

- name: EnablePython
  type: boolean
  default: true

- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true

- name: RunStaticCodeAnalysis
  displayName: Run Static Code Analysis
  type: boolean
  default: true

- name: ORT_EP_NAME
  type: string

- name: MachinePool
  type: string

- name: GenerateDocumentation
  displayName: Generate updated documentation. Requires build to have occurred and `--gen_doc` to be specified
  type: boolean
  default: false

jobs:
- job: build_${{ parameters.job_name_suffix }}
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    setVcvars: true
    ALLOW_RELEASED_ONNX_OPSET_ONLY: '0'
    DocUpdateNeeded: false  # Set to true during document generation if there are diffs
    skipComponentGovernanceDetection: true
    CCACHE_DIR: $(Pipeline.Workspace)/ccache
  workspace:
    clean: all
  pool: ${{ parameters.MachinePool }}
  timeoutInMinutes:  300
  steps:
  - checkout: self
    clean: true
    submodules: none

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      addToPath: true
      architecture: ${{ parameters.buildArch }}

  - template: download-deps.yml

  - script: |
      choco install ccache -y
      choco install ninja -y
      echo "##vso[task.prependpath]C:\ProgramData\chocolatey\bin"
      C:\ProgramData\chocolatey\tools\shimgen.exe -p C:\ProgramData\chocolatey\bin\ccache.exe -c cl.exe -o C:\ProgramData\chocolatey\bin\ccache-cl.exe
      dir C:\ProgramData\chocolatey\bin
    displayName: Install ccache and update PATH to use linked versions of gcc, cc, etc

  - task: PythonScript@0
    displayName: 'Update deps.txt'
    inputs:
      scriptPath: $(Build.SourcesDirectory)/tools/ci_build/replace_urls_in_deps.py
      arguments: --new_dir $(Build.BinariesDirectory)/deps
      workingDirectory: $(Build.BinariesDirectory)

  - task: NodeTool@0
    inputs:
      versionSpec: '16.x'
      force32bit: ${{ parameters.isX86 }}

  # Our build machine doesn't have java x86
  - ${{ if eq(parameters.buildArch, 'x64') }}:
      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '11'
          jdkArchitectureOption: ${{ parameters.buildArch }}
          jdkSourceOption: 'PreInstalled'

  - task: BatchScript@1
    displayName: 'setup env'
    inputs:
      filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\${{ parameters.EnvSetupScript }}'
      modifyEnvironment: true
      workingFolder: '$(Build.BinariesDirectory)'

  - script: |
     set ORT_DOXY_SRC=$(Build.SourcesDirectory)
     set ORT_DOXY_OUT=$(Build.BinariesDirectory)\${{ parameters.BuildConfig }}\${{ parameters.BuildConfig }}
     mkdir %ORT_DOXY_SRC%
     mkdir %ORT_DOXY_OUT%
     "C:\Program Files\doxygen\bin\doxygen.exe" $(Build.SourcesDirectory)\tools\ci_build\github\Doxyfile_csharp.cfg

    workingDirectory: '$(Build.SourcesDirectory)'
    displayName: 'API Documentation Check and generate'

  - script: |
     python -m pip install -q setuptools wheel numpy
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Install python modules'

  - task: Cache@2
    inputs:
      key: '"ccache" | 3party | "${{ parameters.job_name_suffix }}" | "$(Build.SourceBranch)" | "$(Build.SourceVersion)"'
      path: $(CCACHE_DIR)
      restoreKeys: |
        "ccache" | 3party | "${{ parameters.job_name_suffix }}" | "$(Build.SourceBranch)"
        "ccache" | 3party | "${{ parameters.job_name_suffix }}"
      cacheHitVar: CACHE_RESTORED
    displayName: Cach Task

  - task: BatchScript@1
    inputs:
      filename: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
      arguments:  "x64"
      modifyEnvironment: true
      workingFolder: '$(Build.BinariesDirectory)'

  - ${{ if or(eq(parameters.RunOnnxRuntimeTests, true), eq(parameters.GenerateDocumentation, true)) }}:
      - task: PowerShell@2
        displayName: 'Install ONNX'
        inputs:
          filePath: '$(Build.SourcesDirectory)/tools/ci_build/github/windows/install_third_party_deps.ps1'
          workingDirectory: '$(Build.BinariesDirectory)'
          arguments: -cpu_arch ${{ parameters.buildArch }} -install_prefix $(Build.BinariesDirectory)\${{ parameters.BuildConfig }}\installed -build_config ${{ parameters.BuildConfig }}


      #Build.py disables running training python frontend tests on Windows, so here we don't install pytorch.
      - ${{ if eq(parameters.isTraining, true) }}:
          - script: |
             python -m pip install -r $(Build.SourcesDirectory)\tools\ci_build\github\linux\docker\scripts\training\requirements.txt
            workingDirectory: '$(Build.BinariesDirectory)'
            displayName: 'Install python modules'

  - script: |
      echo %PATH%
      C:\ProgramData\chocolatey\bin\ccache -s
    displayName: Show Cache -stats
    workingDirectory: '$(Build.BinariesDirectory)'
